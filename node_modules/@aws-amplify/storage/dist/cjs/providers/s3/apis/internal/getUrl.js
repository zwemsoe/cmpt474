'use strict';

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", { value: true });
exports.getUrl = void 0;
const utils_1 = require("@aws-amplify/core/internals/utils");
const validation_1 = require("../../../../errors/types/validation");
const client_1 = require("../../utils/client");
const utils_2 = require("../../utils");
const assertValidationError_1 = require("../../../../errors/utils/assertValidationError");
const constants_1 = require("../../utils/constants");
const getProperties_1 = require("./getProperties");
const getUrl = async (amplify, input) => {
    const { key, options } = input;
    if (options?.validateObjectExistence) {
        await (0, getProperties_1.getProperties)(amplify, { key, options }, utils_1.StorageAction.GetUrl);
    }
    const { s3Config, keyPrefix, bucket } = await (0, utils_2.resolveS3ConfigAndInput)(amplify, options);
    let urlExpirationInSec = options?.expiresIn ?? constants_1.DEFAULT_PRESIGN_EXPIRATION;
    const awsCredExpiration = s3Config.credentials?.expiration;
    if (awsCredExpiration) {
        const awsCredExpirationInSec = Math.floor((awsCredExpiration.getTime() - Date.now()) / 1000);
        urlExpirationInSec = Math.min(awsCredExpirationInSec, urlExpirationInSec);
    }
    const maxUrlExpirationInSec = constants_1.MAX_URL_EXPIRATION / 1000;
    (0, assertValidationError_1.assertValidationError)(urlExpirationInSec <= maxUrlExpirationInSec, validation_1.StorageValidationErrorCode.UrlExpirationMaxLimitExceed);
    // expiresAt is the minimum of credential expiration and url expiration
    return {
        url: await (0, client_1.getPresignedGetObjectUrl)({
            ...s3Config,
            expiration: urlExpirationInSec,
        }, {
            Bucket: bucket,
            Key: `${keyPrefix}${key}`,
        }),
        expiresAt: new Date(Date.now() + urlExpirationInSec * 1000),
    };
};
exports.getUrl = getUrl;
//# sourceMappingURL=getUrl.js.map
