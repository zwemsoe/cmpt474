{"version":3,"file":"getUrl.js","sources":["../../../../../src/providers/s3/apis/getUrl.ts"],"sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getUrl = void 0;\nconst core_1 = require(\"@aws-amplify/core\");\nconst getUrl_1 = require(\"./internal/getUrl\");\n/**\n * Get a temporary presigned URL to download the specified S3 object.\n * The presigned URL expires when the associated role used to sign the request expires or\n * the option  `expiresIn` is reached. The `expiresAt` property in the output object indicates when the URL MAY expire.\n *\n * By default, it will not validate the object that exists in S3. If you set the `options.validateObjectExistence`\n * to true, this method will verify the given object already exists in S3 before returning a presigned\n * URL, and will throw {@link StorageError} if the object does not exist.\n *\n * @param input - The GetUrlInput object.\n * @returns Presigned URL and timestamp when the URL MAY expire.\n * @throws service: {@link S3Exception} - thrown when checking for existence of the object\n * @throws validation: {@link StorageValidationErrorCode } - Validation errors\n * thrown either username or key are not defined.\n *\n */\nconst getUrl = (input) => {\n    return (0, getUrl_1.getUrl)(core_1.Amplify, input);\n};\nexports.getUrl = getUrl;\n"],"names":[],"mappings":";;AACA;AACA;AACA,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,YAAY,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;AAC9D,OAAO,CAAC,MAAM,GAAG,KAAK,CAAC,CAAC;AACxB,MAAM,MAAM,GAAG,OAAO,CAAC,mBAAmB,CAAC,CAAC;AAC5C,MAAM,QAAQ,GAAG,OAAO,CAAC,mBAAmB,CAAC,CAAC;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,MAAM,GAAG,CAAC,KAAK,KAAK;AAC1B,IAAI,OAAO,IAAI,QAAQ,CAAC,MAAM,EAAE,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;AACvD,CAAC,CAAC;AACF,OAAO,CAAC,MAAM,GAAG,MAAM;;"}