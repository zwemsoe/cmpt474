'use strict';

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", { value: true });
exports.calculateContentMd5 = void 0;
const md5_js_1 = require("@smithy/md5-js");
const utils_1 = require("./client/utils");
const calculateContentMd5 = async (content) => {
    const hasher = new md5_js_1.Md5();
    if (typeof content === 'string') {
        hasher.update(content);
    }
    else if (ArrayBuffer.isView(content) || content instanceof ArrayBuffer) {
        const blob = new Blob([content]);
        const buffer = await readFileToBase64(blob);
        hasher.update(buffer);
    }
    else {
        const buffer = await readFileToBase64(content);
        hasher.update((0, utils_1.utf8Encode)(buffer));
    }
    const digest = await hasher.digest();
    return (0, utils_1.toBase64)(digest);
};
exports.calculateContentMd5 = calculateContentMd5;
const readFileToBase64 = (blob) => {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onloadend = () => {
            // reference: https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsDataURL
            // response from readAsDataURL is always prepended with "data:*/*;base64,"
            // reference: https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readyState
            if (reader.readyState !== 2) {
                reject(new Error('Reader aborted too early'));
                return;
            }
            resolve(reader.result.split(',')[1]);
        };
        reader.onabort = () => {
            reject(new Error('Read aborted'));
        };
        reader.onerror = () => {
            reject(reader.error);
        };
        // reader.readAsArrayBuffer is not available in RN
        reader.readAsDataURL(blob);
    });
};
//# sourceMappingURL=md5.js.map
