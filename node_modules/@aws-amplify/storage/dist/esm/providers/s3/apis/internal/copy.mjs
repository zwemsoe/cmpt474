import { StorageAction } from '@aws-amplify/core/internals/utils';
import '@smithy/md5-js';
import '@aws-amplify/core/internals/aws-client-utils';
import '../../utils/client/runtime/s3TransferHandler/fetch.mjs';
import 'fast-xml-parser';
import '../../utils/client/runtime/s3TransferHandler/xhr.mjs';
import 'buffer';
import { resolveS3ConfigAndInput } from '../../utils/resolveS3ConfigAndInput.mjs';
import { assertValidationError } from '../../../../errors/utils/assertValidationError.mjs';
import { StorageValidationErrorCode } from '../../../../errors/types/validation.mjs';
import { logger } from '../../../../utils/logger.mjs';
import '../../utils/client/base.mjs';
import '../../utils/client/getObject.mjs';
import '../../utils/client/listObjectsV2.mjs';
import '../../utils/client/putObject.mjs';
import '../../utils/client/createMultipartUpload.mjs';
import '../../utils/client/uploadPart.mjs';
import '../../utils/client/completeMultipartUpload.mjs';
import '../../utils/client/listParts.mjs';
import '../../utils/client/abortMultipartUpload.mjs';
import { copyObject } from '../../utils/client/copyObject.mjs';
import '../../utils/client/headObject.mjs';
import '../../utils/client/deleteObject.mjs';
import { getStorageUserAgentValue } from '../../utils/userAgent.mjs';

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const copy = async (amplify, input) => {
    const { source: { key: sourceKey }, destination: { key: destinationKey }, } = input;
    assertValidationError(!!sourceKey, StorageValidationErrorCode.NoSourceKey);
    assertValidationError(!!destinationKey, StorageValidationErrorCode.NoDestinationKey);
    const { s3Config, bucket, keyPrefix: sourceKeyPrefix, } = await resolveS3ConfigAndInput(amplify, input.source);
    const { keyPrefix: destinationKeyPrefix } = await resolveS3ConfigAndInput(amplify, input.destination); // resolveS3ConfigAndInput does not make extra API calls or storage access if called repeatedly.
    // TODO(ashwinkumar6) V6-logger: warn `You may copy files from another user if the source level is "protected", currently it's ${srcLevel}`
    const finalCopySource = `${bucket}/${sourceKeyPrefix}${sourceKey}`;
    const finalCopyDestination = `${destinationKeyPrefix}${destinationKey}`;
    logger.debug(`copying "${finalCopySource}" to "${finalCopyDestination}".`);
    await copyObject({
        ...s3Config,
        userAgentValue: getStorageUserAgentValue(StorageAction.Copy),
    }, {
        Bucket: bucket,
        CopySource: finalCopySource,
        Key: finalCopyDestination,
        MetadataDirective: 'COPY', // Copies over metadata like contentType as well
    });
    return {
        key: destinationKey,
    };
};

export { copy };
//# sourceMappingURL=copy.mjs.map
