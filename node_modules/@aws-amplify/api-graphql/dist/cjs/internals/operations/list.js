'use strict';

Object.defineProperty(exports, "__esModule", { value: true });
exports.listFactory = void 0;
const APIClient_1 = require("../APIClient");
function listFactory(client, modelIntrospection, model, context = false) {
    const listWithContext = async (contextSpec, args) => {
        return _list(client, modelIntrospection, model, args, contextSpec);
    };
    const list = async (args) => {
        return _list(client, modelIntrospection, model, args);
    };
    return context ? listWithContext : list;
}
exports.listFactory = listFactory;
async function _list(client, modelIntrospection, model, args, contextSpec) {
    const { name } = model;
    const query = (0, APIClient_1.generateGraphQLDocument)(modelIntrospection, name, 'LIST', args);
    const variables = (0, APIClient_1.buildGraphQLVariables)(model, 'LIST', args, modelIntrospection);
    try {
        const auth = (0, APIClient_1.authModeParams)(client, args);
        const headers = (0, APIClient_1.getCustomHeaders)(client, args?.headers);
        const { data, extensions } = !!contextSpec
            ? (await client.graphql(contextSpec, {
                ...auth,
                query,
                variables,
            }, headers))
            : (await client.graphql({
                ...auth,
                query,
                variables,
            }, headers));
        // flatten response
        if (data !== undefined) {
            const [key] = Object.keys(data);
            if (data[key].items) {
                const flattenedResult = (0, APIClient_1.flattenItems)(data)[key];
                // don't init if custom selection set
                if (args?.selectionSet) {
                    return {
                        data: flattenedResult,
                        nextToken: data[key].nextToken,
                        extensions,
                    };
                }
                else {
                    const initialized = (0, APIClient_1.initializeModel)(client, name, flattenedResult, modelIntrospection, auth.authMode, auth.authToken, !!contextSpec);
                    return {
                        data: initialized,
                        nextToken: data[key].nextToken,
                        extensions,
                    };
                }
            }
            return {
                data: data[key],
                nextToken: data[key].nextToken,
                extensions,
            };
        }
    }
    catch (error) {
        if (error.errors) {
            // graphql errors pass through
            return error;
        }
        else {
            // non-graphql errors re re-thrown
            throw error;
        }
    }
}
//# sourceMappingURL=list.js.map
