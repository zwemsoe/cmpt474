'use strict';

Object.defineProperty(exports, "__esModule", { value: true });
exports.getFactory = void 0;
const APIClient_1 = require("../APIClient");
function getFactory(client, modelIntrospection, model, operation, useContext = false) {
    const getWithContext = async (contextSpec, arg, options) => {
        return _get(client, modelIntrospection, model, arg, options, operation, contextSpec);
    };
    const get = async (arg, options) => {
        return _get(client, modelIntrospection, model, arg, options, operation);
    };
    return useContext ? getWithContext : get;
}
exports.getFactory = getFactory;
async function _get(client, modelIntrospection, model, arg, options, operation, context) {
    const { name } = model;
    const query = (0, APIClient_1.generateGraphQLDocument)(modelIntrospection, name, operation, options);
    const variables = (0, APIClient_1.buildGraphQLVariables)(model, operation, arg, modelIntrospection);
    try {
        const auth = (0, APIClient_1.authModeParams)(client, options);
        const headers = (0, APIClient_1.getCustomHeaders)(client, options?.headers);
        const { data, extensions } = context
            ? (await client.graphql(context, {
                ...auth,
                query,
                variables,
            }, headers))
            : (await client.graphql({
                ...auth,
                query,
                variables,
            }, headers));
        // flatten response
        if (data) {
            const [key] = Object.keys(data);
            const flattenedResult = (0, APIClient_1.flattenItems)(data)[key];
            if (options?.selectionSet) {
                return { data: flattenedResult, extensions };
            }
            else {
                // TODO: refactor to avoid destructuring here
                const [initialized] = (0, APIClient_1.initializeModel)(client, name, [flattenedResult], modelIntrospection, auth.authMode, auth.authToken, !!context);
                return { data: initialized, extensions };
            }
        }
        else {
            return { data: null, extensions };
        }
    }
    catch (error) {
        if (error.errors) {
            // graphql errors pass through
            return error;
        }
        else {
            // non-graphql errors re re-thrown
            throw error;
        }
    }
}
//# sourceMappingURL=get.js.map
