import { Observable } from 'rxjs';
import { GraphQLAuthMode, CustomUserAgentDetails, DocumentType } from '@aws-amplify/core/internals/utils';
import { PubSubContentObserver } from '../../types/PubSub';
import { SUBSCRIPTION_STATUS } from '../constants';
import { CustomHeaders } from '@aws-amplify/data-schema-types';
export type ObserverQuery = {
    observer: PubSubContentObserver;
    query: string;
    variables: Record<string, DocumentType>;
    subscriptionState: SUBSCRIPTION_STATUS;
    subscriptionReadyCallback?: Function;
    subscriptionFailedCallback?: Function;
    startAckTimeoutId?: ReturnType<typeof setTimeout>;
};
export interface AWSAppSyncRealTimeProviderOptions {
    appSyncGraphqlEndpoint?: string;
    authenticationType?: GraphQLAuthMode;
    query?: string;
    variables?: Record<string, DocumentType>;
    apiKey?: string;
    region?: string;
    libraryConfigHeaders?: () => {} | (() => Promise<{}>);
    additionalHeaders?: CustomHeaders;
    additionalCustomHeaders?: Record<string, string>;
    authToken?: string;
}
export declare class AWSAppSyncRealTimeProvider {
    private awsRealTimeSocket?;
    private socketStatus;
    private keepAliveTimeoutId?;
    private keepAliveTimeout;
    private keepAliveAlertTimeoutId?;
    private subscriptionObserverMap;
    private promiseArray;
    private connectionState;
    private readonly connectionStateMonitor;
    private readonly reconnectionMonitor;
    private connectionStateMonitorSubscription;
    constructor(options?: AWSAppSyncRealTimeProviderOptions);
    /**
     * Mark the socket closed and release all active listeners
     */
    close(): void;
    getNewWebSocket(url: string, protocol: string): WebSocket;
    getProviderName(): string;
    private isCustomDomain;
    subscribe(options?: AWSAppSyncRealTimeProviderOptions, customUserAgentDetails?: CustomUserAgentDetails): Observable<Record<string, unknown>>;
    private _startSubscriptionWithAWSAppSyncRealTime;
    private _logStartSubscriptionError;
    private _waitForSubscriptionToBeConnected;
    private _sendUnsubscriptionMessage;
    private _removeSubscriptionObserver;
    private _closeSocketIfRequired;
    private _handleIncomingSubscriptionMessage;
    private _errorDisconnect;
    private _timeoutStartSubscriptionAck;
    private _initializeWebSocketConnection;
    private _initializeRetryableHandshake;
    private _initializeHandshake;
    private _awsRealTimeHeaderBasedAuth;
    private _awsAuthTokenHeader;
    private _awsRealTimeApiKeyHeader;
    private _awsRealTimeIAMHeader;
    private _customAuthHeader;
}
